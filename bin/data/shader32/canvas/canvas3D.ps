////////////////////////////////////////////////////////////////////////////////
//    ScopeFun Oscilloscope ( http://www.scopefun.com )
//    Copyright (C) 2016 David Košenina
//
//    This file is part of ScopeFun Oscilloscope.
//
//    ScopeFun Oscilloscope is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    ScopeFun Oscilloscope is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this ScopeFun Oscilloscope.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////




layout (std140) uniform PSCBuffer0 {
	vec4 	  gPSRenderTarget;
	vec4 	  gPSColor;
	mat4 	  gPSFinalMatrix;
	vec4      gPSDirectionalLight;
};

uniform sampler2D gPSTexture0;

#ifdef TEXTURE	
	in vec2 Tex;	
#else
	#ifdef NORMAL
		in vec4 Normal;
	#endif
	#ifdef COLOR
		in vec4 WorldPosition;
	#endif	
#endif

out vec4 outColor;

vec4 lerp(vec4 a, vec4 b, float s)
{
    return (a + (b - a) * s);
}

void main()
{	
	#ifdef TEXTURE
		outColor = texture( gPSTexture0, Tex )*gPSColor;
		if( outColor.a < 1 ) discard;
	#else		
		vec4 color = gPSColor;
						
		#ifdef COLOR
			vec4 black = vec4( 0.f, 0.f, 0.f, 1.f );
			float  y   = WorldPosition.y + 0.5f;
			color = lerp( black, lerp( black, gPSColor, y ), y);
		#endif
		
		#ifdef LIGHT			
			float dotProduct = dot( normalize(Normal.xyz), -normalize(gPSDirectionalLight.xyz) );			
			color = vec4( color.xyz * dotProduct, 1.0 );			
		#endif
						
		outColor   = color;
		outColor.a = gPSColor.a;	
	#endif
}
